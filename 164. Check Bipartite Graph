#include<bits/stdc++.h>
bool dfs(int node,vector<int> &color,vector<int> adj[]){
	if(color[node] == -1) color[node] = 1;
	for(auto it:adj[node]){
		if(color[it] == -1){
			color[it] = !color[node];
			if(!dfs(it,color,adj))
				return false;
		}
		else if(color[node] == color[it])
			return false;
	}
	return true;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	// Write your code here.
	int n = edges.size();
	vector<int> adj[n];
	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			if(edges[i][j] == 1){
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}

	vector<int> color(n,-1);
	for(int i=0;i<n;i++){
		if(color[i] == -1){
			if(!dfs(i,color,adj))
				return false;
		}
	}
	return true;	
}
