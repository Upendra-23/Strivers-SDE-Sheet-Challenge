/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* merge(Node* &head1,Node* &head2){
	Node* dummy = new Node(0);
	Node* res = dummy;
	while(head1 && head2){
		if(head1->data < head2->data){
			res->child = head1;
			res = head1;
			head1 = head1->child;
		}
		else{
			res->child = head2;
			res = head2;
			head2 = head2->child;
		}
	}
	res->child = head1?head1:head2;
	return dummy->child;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
	if(!head->next) return head;
	Node* head2 = flattenLinkedList(head->next);
	head->next = NULL;
	return merge(head,head2);
}
