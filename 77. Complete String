#include <bits/stdc++.h> 
struct Node {
    Node* links[26];
    bool flag;

    bool contains(char ch){
        return links[ch-'a'] != NULL;
    }

    void put(char ch){
        links[ch-'a'] = new Node();
    }

    Node* get(char ch){
        return links[ch-'a'];
    }
};

class Trie {
    Node* root;
public:
    Trie(){
        root = new Node();
    }

    void insert(string &word){
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(!node->contains(word[i]))
                node->put(word[i]);
            node = node->get(word[i]);
        }
        node->flag = true;
    }

    bool isCompletestr(string &word){
        Node* node = root;
        for(int i=0;i<word.size();i++){
            node = node->get(word[i]);
            if(node->flag == false)
                return false;
        }
        return true;
    }
};
string completeString(int n, vector<string> &a){
    // Write your code here.
    Trie obj;
    for(auto it:a)
        obj.insert(it);
    string longest = "";
    for(auto it:a){
        if(obj.isCompletestr(it)){
            if(it.size() > longest.size())
                longest = it;
            else if(it.size() == longest.size() && it < longest)
                longest = it;
        }   
    }
    if(longest.size()) return longest;
    return "None";
}
