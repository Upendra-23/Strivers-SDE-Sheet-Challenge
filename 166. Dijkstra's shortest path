#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // Write your code here.
    vector<pair<int,int>> adj[vertices];
    for(auto it:vec){
        adj[it[0]].push_back({it[1],it[2]});
        adj[it[1]].push_back({it[0],it[2]});
    }

    vector<int> dist(vertices,INT_MAX);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    pq.push({0,0});
    dist[0]=0;
    while(!pq.empty()){
        auto it = pq.top();
        pq.pop();
        int node = it.second;
        int d = it.first;
        for(auto it:adj[node]){
            int adjnode = it.first;
            int edgewt = it.second;
            if(d + edgewt < dist[adjnode]){
                dist[adjnode] = d + edgewt;
                pq.push({dist[adjnode],adjnode});
            }
        }
    }
    return dist;
}
