#include <bits/stdc++.h> 
class DisjointSet {
    vector<int> parent, size;
public:

    DisjointSet(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findUpar(int node){
        if(parent[node] == node)
            return node;
        return parent[node] = findUpar(parent[node]);
    }

    void unionBySize(int u,int v){
        int ulp_u = findUpar(u);
        int ulp_v = findUpar(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] > size[ulp_v]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
        else{
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
    }
};

int kruskalMST(int n, int m, vector<vector<int>> &graph) {
	// Write your code here.
	vector<pair<int,pair<int,int>>> edges;
	for(auto it:graph)
		edges.push_back({it[2],{it[0],it[1]}});
	sort(edges.begin(),edges.end());
	
	int sum = 0;
	DisjointSet ds(n);
	for(auto it:edges){
		int u = it.second.first;
		int v = it.second.second;
		int w = it.first;
		if(ds.findUpar(u) != ds.findUpar(v)){
			ds.unionBySize(u,v);
			sum += w;
		}
	}
	return sum;
}
