#include<bits/stdc++.h>
struct Node {
    Node* links[2];
    bool contains(int bit){
        return links[bit] != NULL;
    }
    void put(int bit){
        links[bit] = new Node();
    }
    Node* get(int bit){
        return links[bit];
    }
};

class Trie {
    Node* root;
public:
    Trie(){
        root = new Node();
    }
    
    void insert(int num){
        Node* node = root;
        for(int i=31;i>=0;i--){
            int bit = (num >> i) & 1;
            if(!node->contains(bit))
                node->put(bit);
            node = node->get(bit);
        }
    }

    int getmax(int num){
        Node* node = root;
        int maxNum = 0;
        for(int i=31;i>=0;i--){
            int bit = (num >> i) & 1;
            if (node->contains(1 - bit)) {
                maxNum = maxNum | (1 << i);
                node = node->get(1-bit);
            }
            else
                node = node->get(bit);
        }
        return maxNum;
    }   
};

vector<int> maxXorQueries(vector<int> &arr, vector<vector<int>> &queries){
	//	Write your coode here.
	sort(arr.begin(),arr.end());
	vector<pair<int,pair<int,int>>> que;

	for(int i=0;i<queries.size();i++)
		que.push_back({queries[i][1],{queries[i][0],i}});
	sort(que.begin(),que.end());

	int ind = 0;
	int n = arr.size();
	vector<int> ans(que.size());
	Trie obj;
	for(int i=0;i<que.size();i++){
		int ai = que[i].first;
		int xi = que[i].second.first;
		int k = que[i].second.second;
		while(ind < n && arr[ind] <= ai)
			obj.insert(arr[ind++]);
		if(ind == 0) ans[k] = -1;
		else ans[k] = obj.getmax(xi);
	}
	return ans;	
}
