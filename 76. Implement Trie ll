#include <bits/stdc++.h> 
struct Node{
    Node* links[26];
    int cntEw = 0;
    int cntpf = 0;

    bool contains(char ch){
        return links[ch-'a'] != NULL;
    }

    void put(char ch){
        links[ch-'a'] = new Node();
    }

    Node* get(char ch){
        return links[ch-'a'];
    }
};
class Trie{
    Node* root = new Node();
public:

    Trie(){
        root = new Node();
    }

    void insert(string &word){
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(!node->contains(word[i]))
                node->put(word[i]);
            node = node->get(word[i]);
            node->cntpf++;
        }
        node->cntEw++;
    }

    int countWordsEqualTo(string &word){
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(!node->contains(word[i]))
                return 0;
            node = node->get(word[i]);
        }
        return node->cntEw;
    }

    int countWordsStartingWith(string &word){
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(!node->contains(word[i]))
                return 0;
            node = node->get(word[i]);
        }
        return node->cntpf;
    }

    void erase(string &word){
        Node* node = root;
        for(int i=0;i<word.size();i++){
            node = node->get(word[i]);
            node->cntpf--;
        }
        node->cntEw--;
    }
};
