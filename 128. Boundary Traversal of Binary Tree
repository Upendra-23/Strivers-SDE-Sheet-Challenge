#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:
    
    template <typename T>
    class TreeNode {
        public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if(left)
                delete left;
            if(right)
                delete right;
        }
    };

************************************************************/

bool isleaf(TreeNode<int>* root){
    return (!root->left && !root->right);
}

void leftBoundary(TreeNode<int>* root,vector<int> &ans){
    TreeNode<int>* curr = root->left;
    while(curr){
        if(!isleaf(curr)) ans.push_back(curr->data);
        if(curr->left) curr = curr->left;
        else curr = curr->right;
    }
}

void leafBoundary(TreeNode<int>* root,vector<int> &ans){
    if(!root) return;
    if(isleaf(root)){
        ans.push_back(root->data);
        return;
    }
    leafBoundary(root->left,ans);
    leafBoundary(root->right, ans);
}

void rightBoundary(TreeNode<int>* root,vector<int> &ans){
    TreeNode<int>* curr = root->right;
    vector<int> temp;
    while(curr){
        if(!isleaf(curr)) temp.push_back(curr->data);
        if(curr->right) curr = curr->right;
        else curr = curr->left;
    }
    for(int i=temp.size()-1;i>=0;i--)
        ans.push_back(temp[i]);
}


vector<int> traverseBoundary(TreeNode<int>* root){
    // Write your code here.
    vector<int> ans;
    if(!root) return ans;
    if(!isleaf(root)) ans.push_back(root->data);
    leftBoundary(root,ans);
    leafBoundary(root,ans);
    rightBoundary(root,ans);
    return ans;

}
