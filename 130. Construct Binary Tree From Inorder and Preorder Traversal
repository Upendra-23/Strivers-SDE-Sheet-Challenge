#include <bits/stdc++.h> 
/************************************************************

    Following is the TreeNode class structure

    template <typename T>
    class TreeNode {
       public:
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this->data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

TreeNode<int>* build(vector<int> &preorder,int prestart,int preend,vector<int> &inorder,
int instart,int inend,unordered_map<int,int> &mp){
    if(prestart > preend || instart > inend) return NULL;
    TreeNode<int>* root = new TreeNode<int> (preorder[prestart]);
    int inroot = mp[root->data];
    int numsleft = inroot-instart;
    root->left = build(preorder,prestart+1,prestart+numsleft,inorder,instart,inroot-1,mp);
    root->right = build(preorder,prestart+numsleft+1,preend,inorder,inroot+1,inend,mp);
    return root;
}

TreeNode<int> *buildBinaryTree(vector<int> &inorder, vector<int> &preorder)
{
	//    Write your code here
    unordered_map<int,int> mp;
    for(int i=0;i<inorder.size();i++)
        mp[inorder[i]] = i;
    return build(preorder,0,preorder.size()-1,inorder,0,inorder.size()-1,mp);
}
