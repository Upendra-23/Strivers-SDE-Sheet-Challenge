#include<bits/stdc++.h>
/************************************************************
   
   Following is the TreeNode class structure
   
   class TreeNode<T>
   { 
   public:
        T data; 
        TreeNode<T> *left;
        TreeNode<T> *right;
   
        TreeNode(T data) 
  		{ 
            this -> data = data; 
            left = NULL; 
            right = NULL; 
        }
   };
   
   
 ************************************************************/

 TreeNode<int>* build(vector<int> &inorder,int instart,int inend,vector<int> &postorder,int poststart,int postend,unordered_map<int,int> &mp){
      if(instart > inend || poststart > postend) return NULL;
      TreeNode<int>* root = new TreeNode<int>(postorder[postend]);
      int inroot = mp[root->data];
      int numsleft = inroot-instart;
      root->left = build(inorder,instart,inroot-1,postorder,poststart,poststart+numsleft-1,mp);
      root->right = build(inorder,inroot+1,inend,postorder,poststart+numsleft,postend-1,mp);
      return root;
 }
TreeNode<int>* getTreeFromPostorderAndInorder(vector<int>& postorder, vector<int>& inorder) 
{
	// Write your code here.
     unordered_map<int,int> mp;
     for(int i=0;i<inorder.size();i++)
          mp[inorder[i]] = i;
     return build(inorder,0,inorder.size()-1,postorder,0,postorder.size()-1,mp);
}
